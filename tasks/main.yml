---

- name: windows powershell upgrade
  ansible.builtin.include_role:
    name: "{{ windows_powershell_upgrade_role }}"
  when: upgrade_powershell | bool

- name: run setup module
  ansible.builtin.setup:

- name: set os_version and os_version_name
  ansible.builtin.set_fact:
    os_version: "{{ ansible_kernel.split('.')[0] }}.{{ ansible_kernel.split('.')[1] }}"
    os_version_name: "os_{{ ansible_kernel.split('.')[0] }}_{{ ansible_kernel.split('.')[1] }}"

- name: fixes for Windows 2008 and Windows 7
  block:
    # This is needed where many tasks and polls run against the windows target where it reaches the limit
    # Default value is 1500
    - name: increase MaxConcurrentOperationsPerUser
      ansible.windows.win_shell: |
        winrm set winrm/config/service @{MaxConcurrentOperationsPerUser="20000"}
      args:
        executable: cmd

    # first we need to fix SSL connections with the hotfix
    - name: apply hotfix for fixing SSL connections
      ansible.builtin.include_role:
        name: "{{ windows_hotfix_role }}"
      vars:
        hotfix: "{{ win2008_hotfixes[0] }}"

    - name: install dism
      ansible.builtin.include_tasks: install_dism.yml

    # enable TLS 1.2 with an hotfix
    - name: apply hotfix for TLS v1.2
      ansible.builtin.include_role:
        name: "{{ windows_hotfix_role }}"
      vars:
        hotfix: "{{ win2008_hotfixes[1] }}"
  when: "'Windows Server 2008' in ansible_distribution or 'Windows 7' in ansible_distribution"

- name: enable TLS v1.2
  ansible.builtin.include_tasks: enable_tlsv12.yml

- name: update agent on Windows 2008 and Windows 7
  ansible.builtin.include_tasks: update_agent_win2008.yml
  when: "'Windows Server 2008' in ansible_distribution or 'Windows 7' in ansible_distribution"

- name: disable force unload registry
  ansible.windows.win_regedit:
    path: HKLM:\Software\Policies\Microsoft\Windows\System
    name: DisableForceUnload
    data: 1
    type: dword
    state: present
  register: disable_force_unload_registry
  when: ('Windows Server 2008' in ansible_distribution)

- name: apply hotfix for Windows 2012 and Windows 8
  ansible.builtin.include_role:
    name: "{{ windows_hotfix_role }}"
  loop: "{{ win2012_hotfixes[os_version_name | default('os_6_3')] }}"
  loop_control:
    loop_var: hotfix
  when: "'Windows Server 2012' in ansible_distribution or 'Windows 8' in ansible_distribution"

- name: disable auto logon
  ansible.builtin.include_tasks: disable_auto_logon.yml

- name: configure and apply windows updates
  block:
    - name: register with windows update server
      ansible.builtin.include_role:
        name: "{{ windows_configure_update_role }}"
      vars:
        role_action: register
        wsus_server: "{{ win_update_server }}"
        register_with_wsus: true
      when: win_update_server | length > 0

    - name: apply windows updates
      ansible.builtin.include_role:
        name: "{{ windows_update_role }}"
      vars:
        win_update_server_selection: "{{ 'managed_server' if (win_update_server | length > 0) else 'default' }}"
  always:
    - name: unregister from windows update server
      ansible.builtin.include_role:
        name: "{{ windows_configure_update_role }}"
      vars:
        role_action: unregister
      when: win_update_server | length > 0
  when: install_updates | bool

- name: ensure windows update service stopped and disabled
  ansible.windows.win_service:
    name: wuauserv
    state: stopped
    start_mode: disabled
  failed_when: false

- name: install virtio drivers
  ansible.builtin.include_role:
    name: "{{ virtio_role }}"
  vars:
    virtio_install_guest_agent: '{{ target_ovirt | bool }}'
  when: >
    target_ovirt | bool or
    target_qemu | bool or
    ('KubeVirt' in (ansible_system_vendor | default('', true)))

- name: install virtualbox guest additions
  ansible.builtin.include_role:
    name: "{{ virtualbox_guest_additions_role }}"
  when: ('VirtualBox' in (ansible_product_name | default('', true)))

- name: install vmware tools
  ansible.builtin.include_role:
    name: "{{ vmware_tools_role }}"
  when: ('VMware' in (ansible_product_name | default('', true)))

- name: install parallels tools
  ansible.builtin.include_role:
    name: "{{ parallels_tools_role }}"
  when: ('Parallels' in (ansible_product_name | default('', true))) or (ansible_product_name == None and 'Parallels' in ansible_interfaces[0].interface_name)

- name: startup settings
  ansible.builtin.include_tasks: startup.yml

- name: apply policies
  ansible.builtin.include_tasks: policy.yml

- name: adjust power settings
  ansible.builtin.include_tasks: power.yml
  when: (ansible_os_product_type == 'workstation') | default(False)

- name: enable rdp
  ansible.builtin.include_tasks: enable_rdp.yml

- name: install cloudbase-init
  ansible.builtin.include_tasks: cloudbase-init.yml
  when:
    - ('VMware' not in (ansible_product_name | default('', true)))
    - ('VirtualBox' not in (ansible_product_name | default('', true)))
    - ('KubeVirt' not in (ansible_system_vendor | default('', true)))
    - ('Red Hat' not in (ansible_system_vendor | default('', true))) or target_openstack | bool
    - not target_ovirt | bool
    - not target_vagrant | bool

- name: remove apps and onedrive
  block:
    - name: remove apps
      ansible.builtin.include_tasks: remove_apps-alt-2.yml

    - name: remove onedrive
      ansible.builtin.include_tasks: remove_onedrive.yml
  when:
    - remove_apps | bool
    - (ansible_os_product_type == 'workstation') | default(False)

- name: install ec2 ena driver
  ansible.builtin.include_role:
    name: "{{ ec2_ena_driver_role }}"
  when: target_ec2 | bool

- name: run all handlers here
  ansible.builtin.meta: flush_handlers

- name: clean up components
  ansible.builtin.include_tasks: clean_up_components.yml
  when: clean_up_components | bool

- name: clean up system
  ansible.builtin.include_tasks: clean_up.yml

- name: sysprep
  ansible.builtin.include_tasks: sysprep.yml

- name: compact filesystem
  ansible.builtin.include_tasks: compact.yml

- name: enable force unload registry
  ansible.windows.win_regedit:
    path: HKLM:\Software\Policies\Microsoft\Windows\System
    name: DisableForceUnload
    data: 1
    type: dword
    state: present
  when:
    - ('Windows Server 2008' in ansible_distribution)
    - disable_force_unload_registry is defined
    - disable_force_unload_registry is changed

- name: ensure windows update service is enabled
  ansible.windows.win_service:
    name: wuauserv
    state: stopped
    start_mode: auto
  failed_when: false

- name: shutdown
  ansible.builtin.include_tasks: shutdown.yml
  when: shutdown_instance | bool
